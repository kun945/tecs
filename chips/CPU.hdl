// File name: CPU.hdl
// Author : chenkun <ckmx945@gmail.com>

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPUresident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And(a=instruction[0], b=instruction[15], out=aluJgtF);
    And(a=instruction[1], b=instruction[15], out=aluJeqF);
    And(a=instruction[2], b=instruction[15], out=aluJltF);

    And(a=instruction[3], b=instruction[15], out=writeM);
    And(a=instruction[4], b=instruction[15], out=aluToDf);
    And(a=instruction[5], b=instruction[15], out=aluToAf);

    And(a=instruction[6], b=instruction[15], out=no);
    And(a=instruction[7], b=instruction[15], out=f);
    And(a=instruction[8], b=instruction[15], out=ny);
    And(a=instruction[9], b=instruction[15], out=zy);
    And(a=instruction[10], b=instruction[15], out=nx);
    And(a=instruction[11], b=instruction[15], out=zx);

    And(a=instruction[12], b=instruction[15], out=inAmf);
    Not(in=instruction[15], out=inToAf);
    Mux16(a=aluToA, b=instruction, sel=inToAf, out=inToA);
    Or(a=aluToAf, b=inToAf, out=toAf);

    Mux16(a=aToAlu, b=inM, sel=inAmf, out=amToAlu);
    ALU(x=dToAlu, y=amToAlu, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=aluToA, out=aluToD, out=outM, zr=zr, ng=ng);

    And(a=aluJeqF, b=zr, out=f1);
    And(a=aluJltF, b=ng, out=f2);
    Not(in=ng, out=nng);
    And(a=aluJgtF, b=nng, out=f3);
    Or(a=f1, b=f2, out=f4);
    Or(a=f3, b=f4, out=loadPcF);

    PC(in=aToPc, load=loadPcF, inc=true, reset=reset, out[0..14]=pc);
    ARegister(in=inToA, load=toAf, out=aToAlu, out=aToPc, out[0..14]=addressM);
    DRegister(in=aluToD, load=aluToDf, out=dToAlu);
}
